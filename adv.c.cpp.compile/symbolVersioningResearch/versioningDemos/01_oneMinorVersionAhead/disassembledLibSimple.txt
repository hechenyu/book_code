
libsimple.so:     file format elf32-i386


Disassembly of section .init:

00000394 <_init>:
 394:	53                   	push   ebx
 395:	83 ec 08             	sub    esp,0x8
 398:	e8 00 00 00 00       	call   39d <_init+0x9>
 39d:	5b                   	pop    ebx
 39e:	81 c3 57 1c 00 00    	add    ebx,0x1c57
 3a4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
 3aa:	85 c0                	test   eax,eax
 3ac:	74 05                	je     3b3 <_init+0x1f>
 3ae:	e8 4d 00 00 00       	call   400 <__gmon_start__@plt>
 3b3:	e8 d8 00 00 00       	call   490 <frame_dummy>
 3b8:	e8 23 02 00 00       	call   5e0 <__do_global_ctors_aux>
 3bd:	83 c4 08             	add    esp,0x8
 3c0:	5b                   	pop    ebx
 3c1:	c3                   	ret    

Disassembly of section .plt:

000003d0 <printf@plt-0x10>:
 3d0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
 3d6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
 3dc:	00 00                	add    BYTE PTR [eax],al
	...

000003e0 <printf@plt>:
 3e0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
 3e6:	68 00 00 00 00       	push   0x0
 3eb:	e9 e0 ff ff ff       	jmp    3d0 <_init+0x3c>

000003f0 <__cxa_finalize@plt>:
 3f0:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
 3f6:	68 08 00 00 00       	push   0x8
 3fb:	e9 d0 ff ff ff       	jmp    3d0 <_init+0x3c>

00000400 <__gmon_start__@plt>:
 400:	ff a3 14 00 00 00    	jmp    DWORD PTR [ebx+0x14]
 406:	68 10 00 00 00       	push   0x10
 40b:	e9 c0 ff ff ff       	jmp    3d0 <_init+0x3c>

Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
 410:	55                   	push   ebp
 411:	89 e5                	mov    ebp,esp
 413:	56                   	push   esi
 414:	53                   	push   ebx
 415:	e8 ad 00 00 00       	call   4c7 <__i686.get_pc_thunk.bx>
 41a:	81 c3 da 1b 00 00    	add    ebx,0x1bda
 420:	83 ec 10             	sub    esp,0x10
 423:	80 bb 1c 00 00 00 00 	cmp    BYTE PTR [ebx+0x1c],0x0
 42a:	75 5d                	jne    489 <__do_global_dtors_aux+0x79>
 42c:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
 432:	85 c0                	test   eax,eax
 434:	74 0e                	je     444 <__do_global_dtors_aux+0x34>
 436:	8b 83 18 00 00 00    	mov    eax,DWORD PTR [ebx+0x18]
 43c:	89 04 24             	mov    DWORD PTR [esp],eax
 43f:	e8 ac ff ff ff       	call   3f0 <__cxa_finalize@plt>
 444:	8b 83 20 00 00 00    	mov    eax,DWORD PTR [ebx+0x20]
 44a:	8d b3 1c ff ff ff    	lea    esi,[ebx-0xe4]
 450:	8d 93 18 ff ff ff    	lea    edx,[ebx-0xe8]
 456:	29 d6                	sub    esi,edx
 458:	c1 fe 02             	sar    esi,0x2
 45b:	83 ee 01             	sub    esi,0x1
 45e:	39 f0                	cmp    eax,esi
 460:	73 20                	jae    482 <__do_global_dtors_aux+0x72>
 462:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 468:	83 c0 01             	add    eax,0x1
 46b:	89 83 20 00 00 00    	mov    DWORD PTR [ebx+0x20],eax
 471:	ff 94 83 18 ff ff ff 	call   DWORD PTR [ebx+eax*4-0xe8]
 478:	8b 83 20 00 00 00    	mov    eax,DWORD PTR [ebx+0x20]
 47e:	39 f0                	cmp    eax,esi
 480:	72 e6                	jb     468 <__do_global_dtors_aux+0x58>
 482:	c6 83 1c 00 00 00 01 	mov    BYTE PTR [ebx+0x1c],0x1
 489:	83 c4 10             	add    esp,0x10
 48c:	5b                   	pop    ebx
 48d:	5e                   	pop    esi
 48e:	5d                   	pop    ebp
 48f:	c3                   	ret    

00000490 <frame_dummy>:
 490:	55                   	push   ebp
 491:	89 e5                	mov    ebp,esp
 493:	53                   	push   ebx
 494:	e8 2e 00 00 00       	call   4c7 <__i686.get_pc_thunk.bx>
 499:	81 c3 5b 1b 00 00    	add    ebx,0x1b5b
 49f:	83 ec 14             	sub    esp,0x14
 4a2:	8b 93 20 ff ff ff    	mov    edx,DWORD PTR [ebx-0xe0]
 4a8:	85 d2                	test   edx,edx
 4aa:	74 15                	je     4c1 <frame_dummy+0x31>
 4ac:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 4b2:	85 c0                	test   eax,eax
 4b4:	74 0b                	je     4c1 <frame_dummy+0x31>
 4b6:	8d 93 20 ff ff ff    	lea    edx,[ebx-0xe0]
 4bc:	89 14 24             	mov    DWORD PTR [esp],edx
 4bf:	ff d0                	call   eax
 4c1:	83 c4 14             	add    esp,0x14
 4c4:	5b                   	pop    ebx
 4c5:	5d                   	pop    ebp
 4c6:	c3                   	ret    

000004c7 <__i686.get_pc_thunk.bx>:
 4c7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 4ca:	c3                   	ret    
 4cb:	90                   	nop

000004cc <first_function>:
#include <stdio.h>
#include "simple.h"

int first_function(int x)
{
 4cc:	55                   	push   ebp
 4cd:	89 e5                	mov    ebp,esp
 4cf:	53                   	push   ebx
 4d0:	83 ec 14             	sub    esp,0x14
 4d3:	e8 ef ff ff ff       	call   4c7 <__i686.get_pc_thunk.bx>
 4d8:	81 c3 1c 1b 00 00    	add    ebx,0x1b1c
    printf(" lib: %s\n", __FUNCTION__);
 4de:	8d 83 3e e6 ff ff    	lea    eax,[ebx-0x19c2]
 4e4:	8d 93 86 e6 ff ff    	lea    edx,[ebx-0x197a]
 4ea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 4ee:	89 04 24             	mov    DWORD PTR [esp],eax
 4f1:	e8 ea fe ff ff       	call   3e0 <printf@plt>
    return (x+1);
 4f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 4f9:	83 c0 01             	add    eax,0x1
}
 4fc:	83 c4 14             	add    esp,0x14
 4ff:	5b                   	pop    ebx
 500:	5d                   	pop    ebp
 501:	c3                   	ret    

00000502 <second_function>:

int second_function(int x)
{
 502:	55                   	push   ebp
 503:	89 e5                	mov    ebp,esp
 505:	53                   	push   ebx
 506:	83 ec 14             	sub    esp,0x14
 509:	e8 b9 ff ff ff       	call   4c7 <__i686.get_pc_thunk.bx>
 50e:	81 c3 e6 1a 00 00    	add    ebx,0x1ae6
    printf(" lib: %s\n", __FUNCTION__);
 514:	8d 83 3e e6 ff ff    	lea    eax,[ebx-0x19c2]
 51a:	8d 93 76 e6 ff ff    	lea    edx,[ebx-0x198a]
 520:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 524:	89 04 24             	mov    DWORD PTR [esp],eax
 527:	e8 b4 fe ff ff       	call   3e0 <printf@plt>
    return (x+2);
 52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 52f:	83 c0 02             	add    eax,0x2
}
 532:	83 c4 14             	add    esp,0x14
 535:	5b                   	pop    ebx
 536:	5d                   	pop    ebp
 537:	c3                   	ret    

00000538 <third_function>:

int third_function(int x)
{
 538:	55                   	push   ebp
 539:	89 e5                	mov    ebp,esp
 53b:	53                   	push   ebx
 53c:	83 ec 14             	sub    esp,0x14
 53f:	e8 83 ff ff ff       	call   4c7 <__i686.get_pc_thunk.bx>
 544:	81 c3 b0 1a 00 00    	add    ebx,0x1ab0
    printf(" lib: %s\n", __FUNCTION__);
 54a:	8d 83 3e e6 ff ff    	lea    eax,[ebx-0x19c2]
 550:	8d 93 67 e6 ff ff    	lea    edx,[ebx-0x1999]
 556:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 55a:	89 04 24             	mov    DWORD PTR [esp],eax
 55d:	e8 7e fe ff ff       	call   3e0 <printf@plt>
    return (x+3);
 562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 565:	83 c0 03             	add    eax,0x3
}
 568:	83 c4 14             	add    esp,0x14
 56b:	5b                   	pop    ebx
 56c:	5d                   	pop    ebp
 56d:	c3                   	ret    

0000056e <fourth_function>:

int fourth_function(int x)
{
 56e:	55                   	push   ebp
 56f:	89 e5                	mov    ebp,esp
 571:	53                   	push   ebx
 572:	83 ec 14             	sub    esp,0x14
 575:	e8 4d ff ff ff       	call   4c7 <__i686.get_pc_thunk.bx>
 57a:	81 c3 7a 1a 00 00    	add    ebx,0x1a7a
    printf(" lib: %s\n", __FUNCTION__);
 580:	8d 83 3e e6 ff ff    	lea    eax,[ebx-0x19c2]
 586:	8d 93 57 e6 ff ff    	lea    edx,[ebx-0x19a9]
 58c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 590:	89 04 24             	mov    DWORD PTR [esp],eax
 593:	e8 48 fe ff ff       	call   3e0 <printf@plt>
    return (x+4);
 598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 59b:	83 c0 04             	add    eax,0x4
}
 59e:	83 c4 14             	add    esp,0x14
 5a1:	5b                   	pop    ebx
 5a2:	5d                   	pop    ebp
 5a3:	c3                   	ret    

000005a4 <fifth_function>:

int fifth_function(int x)
{
 5a4:	55                   	push   ebp
 5a5:	89 e5                	mov    ebp,esp
 5a7:	53                   	push   ebx
 5a8:	83 ec 14             	sub    esp,0x14
 5ab:	e8 17 ff ff ff       	call   4c7 <__i686.get_pc_thunk.bx>
 5b0:	81 c3 44 1a 00 00    	add    ebx,0x1a44
    printf(" lib: %s\n", __FUNCTION__);
 5b6:	8d 83 3e e6 ff ff    	lea    eax,[ebx-0x19c2]
 5bc:	8d 93 48 e6 ff ff    	lea    edx,[ebx-0x19b8]
 5c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 5c6:	89 04 24             	mov    DWORD PTR [esp],eax
 5c9:	e8 12 fe ff ff       	call   3e0 <printf@plt>
    return (x+5);
 5ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 5d1:	83 c0 05             	add    eax,0x5
}
 5d4:	83 c4 14             	add    esp,0x14
 5d7:	5b                   	pop    ebx
 5d8:	5d                   	pop    ebp
 5d9:	c3                   	ret    
 5da:	90                   	nop
 5db:	90                   	nop
 5dc:	90                   	nop
 5dd:	90                   	nop
 5de:	90                   	nop
 5df:	90                   	nop

000005e0 <__do_global_ctors_aux>:
 5e0:	55                   	push   ebp
 5e1:	89 e5                	mov    ebp,esp
 5e3:	56                   	push   esi
 5e4:	53                   	push   ebx
 5e5:	e8 dd fe ff ff       	call   4c7 <__i686.get_pc_thunk.bx>
 5ea:	81 c3 0a 1a 00 00    	add    ebx,0x1a0a
 5f0:	8b 83 10 ff ff ff    	mov    eax,DWORD PTR [ebx-0xf0]
 5f6:	83 f8 ff             	cmp    eax,0xffffffff
 5f9:	74 19                	je     614 <__do_global_ctors_aux+0x34>
 5fb:	8d b3 10 ff ff ff    	lea    esi,[ebx-0xf0]
 601:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
 608:	83 ee 04             	sub    esi,0x4
 60b:	ff d0                	call   eax
 60d:	8b 06                	mov    eax,DWORD PTR [esi]
 60f:	83 f8 ff             	cmp    eax,0xffffffff
 612:	75 f4                	jne    608 <__do_global_ctors_aux+0x28>
 614:	5b                   	pop    ebx
 615:	5e                   	pop    esi
 616:	5d                   	pop    ebp
 617:	c3                   	ret    

Disassembly of section .fini:

00000618 <_fini>:
 618:	53                   	push   ebx
 619:	83 ec 08             	sub    esp,0x8
 61c:	e8 00 00 00 00       	call   621 <_fini+0x9>
 621:	5b                   	pop    ebx
 622:	81 c3 d3 19 00 00    	add    ebx,0x19d3
 628:	e8 e3 fd ff ff       	call   410 <__do_global_dtors_aux>
 62d:	83 c4 08             	add    esp,0x8
 630:	5b                   	pop    ebx
 631:	c3                   	ret    
